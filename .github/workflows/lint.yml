# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Lint and test

on:
    push:
    pull_request:

jobs:
    pre_commit:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                python-version: [ '3.7', '3.8', '3.9', '3.10', '3.11' ]

        steps:
            -   uses: actions/checkout@v2
            -   name: Set up Python ${{ matrix.python-version }}
                uses: actions/setup-python@v2
                with:
                    python-version: ${{ matrix.python-version }}

            -   name: Run pre-commit
                uses: pre-commit/action@v3.0.0

    unit_tests:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                python-version: [ '3.7', '3.8', '3.9', '3.10', '3.11' ]
        services:
            postgres:
                image: postgres
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: postgres
                ports: [ '5432:5432' ]
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            -   uses: actions/checkout@v2

            -   name: Set up Python
                uses: actions/setup-python@v2
                with:
                    python-version: '3.x'

            -   name: Cache poetry
                uses: actions/cache@v2
                with:
                    path: |
                        ~/.cache/pypoetry
                        ~/.cache/pip
                    key: ${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

            -   name: Install dependencies
                run: |
                    python -m pip install --upgrade pip poetry
                    poetry config virtualenvs.create false
                    poetry install --no-interaction

            -   name: Test with pytest
                env:
                    POSTGRES_URL: postgresql://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}
                run: |
                    pytest --no-cov-on-fail --cov headlight/ --cov tests/
